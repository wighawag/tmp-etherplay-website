{
  "version": 3,
  "sources": ["C:\\dev\\etherplay\\new_website\\src\\lib\\graphql\\query.ts"],
  "sourcesContent": ["import type {DocumentNode} from 'graphql';\nimport type {OperationContext} from '@urql/core';\nimport {pipe, fromValue, concat, scan, map, subscribe} from 'wonka';\nimport client from './client';\nimport {initialState} from './constants';\nimport type {sourceT} from 'wonka/dist/types/src/Wonka_types.gen';\n\nexport type InternalQueryState<T> = {\n  fetching: boolean;\n  stale: boolean;\n  data: T;\n  error: unknown;\n  extensions: Record<string, unknown>;\n};\n\nexport function query<\n  Data extends Record<string, unknown>,\n  Variables extends Record<string, unknown> = Record<string, unknown>\n>(args: {\n  query: DocumentNode | string;\n  variables?: Variables;\n  context?: Partial<OperationContext>;\n}): {\n  subscribe: (value: (value: InternalQueryState<Data>) => void) => () => void;\n} {\n  const queryResult$ = pipe(\n    concat([\n      fromValue({fetching: true, stale: false}),\n      pipe(\n        client.query(args.query, args.variables, args.context),\n        map(({stale, data, error, extensions}) => ({\n          fetching: false,\n          stale: !!stale,\n          data,\n          error,\n          extensions,\n        }))\n      ),\n      fromValue({fetching: false, stale: false}),\n    ]),\n    scan(\n      (result, partial) => ({\n        ...result,\n        ...partial,\n      }),\n      initialState\n    )\n  );\n\n  return {\n    subscribe(onValue) {\n      return pipe(\n        queryResult$ as sourceT<InternalQueryState<Data>>,\n        subscribe(onValue)\n      ).unsubscribe;\n    },\n  };\n}\n"],
  "mappings": "AAEA;AACA;AACA;AAWO,sBAGL;AAOA,QAAM,eAAe,KACnB,OAAO;AAAA,IACL,UAAU,CAAC,UAAU,MAAM,OAAO;AAAA,IAClC,KACE,OAAO,MAAM,KAAK,OAAO,KAAK,WAAW,KAAK,UAC9C,IAAI,CAAC,CAAC,OAAO,MAAM,OAAO,gBAAiB;AAAA,MACzC,UAAU;AAAA,MACV,OAAO,CAAC,CAAC;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA;AAAA,IAGJ,UAAU,CAAC,UAAU,OAAO,OAAO;AAAA,MAErC,KACE,CAAC,QAAQ,YAAa;AAAA,OACjB;AAAA,OACA;AAAA,MAEL;AAIJ,SAAO;AAAA,IACL,UAAU;AACR,aAAO,KACL,cACA,UAAU,UACV;AAAA;AAAA;AAAA;",
  "names": []
}
