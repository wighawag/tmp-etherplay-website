{
  "version": 3,
  "sources": ["C:\\dev\\etherplay\\new_website\\src\\lib\\routing\\utils\\createrouter.ts"],
  "sourcesContent": ["import {\n  prepareRoutes,\n  createRouter as curi_createRouter,\n  RouterOptions,\n} from '@curi/router';\nimport {browser, createBase} from '@hickory/browser';\nimport type {CuriRouter} from '@curi/types';\n\ntype ComponentModule = {default: unknown};\n\nfunction parseQueryNoArray(\n  onlyKeys?: string[]\n): (queryString: string) => Record<string, string> {\n  return (queryString: string): Record<string, string> => {\n    if (!queryString) {\n      return {};\n    }\n    const query: Record<string, string> = {};\n    const pairs = (queryString[0] === '?'\n      ? queryString.substr(1)\n      : queryString\n    ).split('&');\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i].split('=');\n      const key = decodeURIComponent(pair[0]);\n      if (!onlyKeys || onlyKeys.indexOf(key) !== -1) {\n        query[key] = decodeURIComponent(pair[1] || '');\n      }\n    }\n    return query;\n  };\n}\n\nfunction queryStringifyNoArray(\n  prefix?: string\n): (query: Record<string, string>) => string {\n  return (query: Record<string, string>): string => {\n    if (!query) {\n      return '';\n    }\n    let str = prefix || '';\n    for (const key of Object.keys(query)) {\n      const value = query[key];\n      str += `${str === '' ? '?' : '&'}${key}=${value}`;\n    }\n    return str;\n  };\n}\n\nexport function createRouter(\n  pages: {\n    name: string;\n    path: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    component?: any;\n    asyncComponent?: () => Promise<ComponentModule>;\n  }[],\n  globalQueryStrings?: string[]\n): CuriRouter {\n  const routesConfig = [];\n\n  for (const routePath of pages) {\n    const asyncComponent = routePath.asyncComponent;\n    if (asyncComponent) {\n      routesConfig.push({\n        name: routePath.name,\n        path:\n          !routePath.path || routePath.path == '/' ? '' : routePath.path + '/',\n        respond({resolved, error}: {resolved: string; error: unknown}) {\n          let data;\n          if (error) {\n            data = {error};\n          }\n          return {\n            body: resolved,\n            data,\n          };\n        },\n        resolve() {\n          return asyncComponent()\n            .then((c) => c.default)\n            .catch(() => {\n              window.onFailingResource && window.onFailingResource();\n            });\n        },\n      });\n    } else {\n      routesConfig.push({\n        name: routePath.name,\n        path:\n          !routePath.path || routePath.path == '/' ? '' : routePath.path + '/',\n        respond() {\n          return {\n            body: routePath.component,\n          };\n        },\n      });\n    }\n  }\n\n  const current = parseQueryNoArray(globalQueryStrings)(location.search);\n  const prefix = queryStringifyNoArray()(current);\n\n  const options: RouterOptions = {\n    history: {\n      query: {\n        parse: parseQueryNoArray(),\n        stringify: queryStringifyNoArray(prefix),\n      },\n    },\n  };\n\n  if (typeof window.basepath !== 'undefined' && window.basepath !== '') {\n    let base = window.basepath;\n    if (base.endsWith('/')) {\n      base = base.slice(0, base.length - 1);\n    }\n    if (base !== '') {\n      if (options.history) {\n        options.history.base = createBase(base);\n      } else {\n        options.history = {base: createBase(base)};\n      }\n    }\n  }\n  return curi_createRouter(browser, prepareRoutes(routesConfig), options);\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAKA;AAKA,2BACE;AAEA,SAAO,CAAC;AACN,QAAI,CAAC;AACH,aAAO;AAAA;AAET,UAAM,QAAgC;AACtC,UAAM,QAAS,aAAY,OAAO,MAC9B,YAAY,OAAO,KACnB,aACF,MAAM;AACR,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ;AAChC,YAAM,OAAO,MAAM,GAAG,MAAM;AAC5B,YAAM,MAAM,mBAAmB,KAAK;AACpC,UAAI,CAAC,YAAY,SAAS,QAAQ,SAAS;AACzC,cAAM,OAAO,mBAAmB,KAAK,MAAM;AAAA;AAAA;AAG/C,WAAO;AAAA;AAAA;AAIX,+BACE;AAEA,SAAO,CAAC;AACN,QAAI,CAAC;AACH,aAAO;AAAA;AAET,QAAI,MAAM,UAAU;AACpB,eAAW,OAAO,OAAO,KAAK;AAC5B,YAAM,QAAQ,MAAM;AACpB,aAAO,GAAG,QAAQ,KAAK,MAAM,MAAM,OAAO;AAAA;AAE5C,WAAO;AAAA;AAAA;AAIJ,6BACL,OAOA;AAEA,QAAM,eAAe;AAErB,aAAW,aAAa;AACtB,UAAM,iBAAiB,UAAU;AACjC,QAAI;AACF,mBAAa,KAAK;AAAA,QAChB,MAAM,UAAU;AAAA,QAChB,MACE,CAAC,UAAU,QAAQ,UAAU,QAAQ,MAAM,KAAK,UAAU,OAAO;AAAA,QACnE,QAAQ,CAAC,UAAU;AACjB,cAAI;AACJ,cAAI;AACF,mBAAO,CAAC;AAAA;AAEV,iBAAO;AAAA,YACL,MAAM;AAAA,YACN;AAAA;AAAA;AAAA,QAGJ;AACE,iBAAO,iBACJ,KAAK,CAAC,MAAM,EAAE,SACd,MAAM;AACL,mBAAO,qBAAqB,OAAO;AAAA;AAAA;AAAA;AAAA;AAK3C,mBAAa,KAAK;AAAA,QAChB,MAAM,UAAU;AAAA,QAChB,MACE,CAAC,UAAU,QAAQ,UAAU,QAAQ,MAAM,KAAK,UAAU,OAAO;AAAA,QACnE;AACE,iBAAO;AAAA,YACL,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAO1B,QAAM,UAAU,kBAAkB,oBAAoB,SAAS;AAC/D,QAAM,SAAS,wBAAwB;AAEvC,QAAM,UAAyB;AAAA,IAC7B,SAAS;AAAA,MACP,OAAO;AAAA,QACL,OAAO;AAAA,QACP,WAAW,sBAAsB;AAAA;AAAA;AAAA;AAKvC,MAAI,OAAO,OAAO,aAAa,eAAe,OAAO,aAAa;AAChE,QAAI,OAAO,OAAO;AAClB,QAAI,KAAK,SAAS;AAChB,aAAO,KAAK,MAAM,GAAG,KAAK,SAAS;AAAA;AAErC,QAAI,SAAS;AACX,UAAI,QAAQ;AACV,gBAAQ,QAAQ,OAAO,WAAW;AAAA;AAElC,gBAAQ,UAAU,CAAC,MAAM,WAAW;AAAA;AAAA;AAAA;AAI1C,SAAO,kBAAkB,SAAS,cAAc,eAAe;AAAA;",
  "names": []
}
