/* src\lib\routing\curi\AsyncLink.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent as SvelteComponent_1,
	assign,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "../../../../_snowpack/pkg/svelte/internal.js";

import { onDestroy, SvelteComponent } from "../../../../_snowpack/pkg/svelte.js";
import { getRouter } from "../../../../_snowpack/pkg/@curi/svelte.js";

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let a;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*wrapper*/ ctx[0];

	function switch_props(ctx) {
		return {
			props: {
				navigating: /*navigating*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*$$restProps*/ ctx[4], { href: /*url*/ ctx[2] }];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*handleClick*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*navigating*/ 2) switch_instance_changes.navigating = /*navigating*/ ctx[1];

			if (dirty & /*$$scope*/ 2048) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (switch_value !== (switch_value = /*wrapper*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4],
				(!current || dirty & /*url*/ 4) && { href: /*url*/ ctx[2] }
			]));
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let url;
	let target;
	const omit_props_names = ["name","params","hash","query","state","wrapper"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let router = getRouter();

	let canNavigate = (event, target) => {
		return !event.defaultPrevented && !target && event.button === 0 && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};

	let { name } = $$props;
	let { params = {} } = $$props;
	let { hash = undefined } = $$props;
	let { query = undefined } = $$props;
	let { state = null } = $$props;
	let { wrapper } = $$props;
	let navigating = false;
	let cancelCallbacks;

	function handleClick(event) {
		if (canNavigate(event, target)) {
			event.preventDefault();
			let cancelled, finished;

			cancelled = finished = () => {
				cancelCallbacks = undefined;
				$$invalidate(1, navigating = false);
			};

			$$invalidate(1, navigating = true);
			cancelCallbacks = router.navigate({ url, state, cancelled, finished });
		}
	}

	onDestroy(() => {
		if (cancelCallbacks) {
			cancelCallbacks();
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("name" in $$new_props) $$invalidate(5, name = $$new_props.name);
		if ("params" in $$new_props) $$invalidate(6, params = $$new_props.params);
		if ("hash" in $$new_props) $$invalidate(7, hash = $$new_props.hash);
		if ("query" in $$new_props) $$invalidate(8, query = $$new_props.query);
		if ("state" in $$new_props) $$invalidate(9, state = $$new_props.state);
		if ("wrapper" in $$new_props) $$invalidate(0, wrapper = $$new_props.wrapper);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*name, params, hash, query*/ 480) {
			$: $$invalidate(2, url = router.url({ name, params, hash, query }));
		}

		$: target = $$restProps.target;
	};

	return [
		wrapper,
		navigating,
		url,
		handleClick,
		$$restProps,
		name,
		params,
		hash,
		query,
		state,
		slots,
		$$scope
	];
}

class AsyncLink extends SvelteComponent_1 {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			name: 5,
			params: 6,
			hash: 7,
			query: 8,
			state: 9,
			wrapper: 0
		});
	}
}

export default AsyncLink;
//# sourceMappingURL=AsyncLink.svelte.js.map
