/* src\components\Modal.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	create_slot,
	detach,
	element,
	globals,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "../../_snowpack/pkg/svelte/internal.js";

const { window: window_1 } = globals;
import { createEventDispatcher, onDestroy } from "../../_snowpack/pkg/svelte.js";
const get_footer_slot_changes = dirty => ({});
const get_footer_slot_context = ctx => ({});

// (61:4) {#if globalCloseButton}
function create_if_block_2(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg class="fill-current text-white" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"><path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z"></path></svg> 
        <span class="text-sm">(Esc)</span>`;

			attr(div, "class", "modal-close absolute top-0 right-0 cursor-pointer flex flex-col items-center mt-4 mr-4 text-white text-sm\n          z-50");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "click", /*close*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (83:8) {#if title}
function create_if_block_1(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*title*/ ctx[2]);
			attr(p, "class", "text-2xl font-bold");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (86:8) {#if closeButton}
function create_if_block(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<svg class="fill-current text-black" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"><path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z"></path></svg>`;
			attr(div, "class", "modal-close cursor-pointer z-50");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "click", /*close*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let div0;
	let t0;
	let div4;
	let t1;
	let div3;
	let div1;
	let t2;
	let t3;
	let t4;
	let div2;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*globalCloseButton*/ ctx[0] && create_if_block_2(ctx);
	let if_block1 = /*title*/ ctx[2] && create_if_block_1(ctx);
	let if_block2 = /*closeButton*/ ctx[1] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const footer_slot_template = /*#slots*/ ctx[8].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[7], get_footer_slot_context);

	return {
		c() {
			div5 = element("div");
			div0 = element("div");
			t0 = space();
			div4 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			div3 = element("div");
			div1 = element("div");
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (default_slot) default_slot.c();
			t4 = space();
			div2 = element("div");
			if (footer_slot) footer_slot.c();
			attr(div0, "class", "z-50 modal-overlay absolute w-full h-full bg-gray-900 opacity-50");
			attr(div1, "class", "flex justify-between items-center pb-3");
			attr(div2, "class", "flex justify-end pt-2");
			attr(div3, "class", "modal-content py-4 text-left px-6");
			attr(div4, "class", "z-50 modal-container bg-black border-2 border-gray-800 w-11/12 md:max-w-md mx-auto rounded\n    shadow-lg overflow-y-auto");
			attr(div5, "class", "modal z-50 opacity-80 fixed w-full h-full top-0 left-0 flex items-center justify-center");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div0);
			append(div5, t0);
			append(div5, div4);
			if (if_block0) if_block0.m(div4, null);
			append(div4, t1);
			append(div4, div3);
			append(div3, div1);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			append(div3, t3);

			if (default_slot) {
				default_slot.m(div3, null);
			}

			append(div3, t4);
			append(div3, div2);

			if (footer_slot) {
				footer_slot.m(div2, null);
			}

			/*div3_binding*/ ctx[9](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "keydown", /*handle_keydown*/ ctx[5]),
					listen(div0, "click", /*close*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*globalCloseButton*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div4, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*title*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*closeButton*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if (footer_slot) {
				if (footer_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_footer_slot_changes, get_footer_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (default_slot) default_slot.d(detaching);
			if (footer_slot) footer_slot.d(detaching);
			/*div3_binding*/ ctx[9](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { globalCloseButton = false } = $$props;
	let { closeButton = false } = $$props;
	let { title } = $$props;
	let { cancelable = true } = $$props;
	const dispatch = createEventDispatcher();
	const close = () => cancelable && dispatch("close");
	let modal;

	function handle_keydown(evt) {
		evt = evt || window.event;
		var isEscape = false;

		if ("key" in evt) {
			isEscape = evt.key === "Escape" || evt.key === "Esc";
		} else {
			isEscape = evt.keyCode === 27;
		}

		if (isEscape) {
			close();
			return;
		}

		if (evt.key === "Tab") {
			// trap focus
			const nodes = modal.querySelectorAll("*");

			const tabbable = Array.from(nodes).filter(n => n.tabIndex >= 0);
			let index = -1;

			if (document.activeElement) {
				index = tabbable.indexOf(document.activeElement);
			}

			if (index === -1 && evt.shiftKey) index = 0;
			index += tabbable.length + (evt.shiftKey ? -1 : 1);
			index %= tabbable.length;
			tabbable[index].focus && tabbable[index].focus();
			evt.preventDefault();
		}
	}

	const previously_focused = typeof document !== "undefined" && document.activeElement;

	if (previously_focused) {
		onDestroy(() => {
			const htmlElement = previously_focused;

			if (htmlElement.focus) {
				htmlElement.focus();
			}
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			modal = $$value;
			$$invalidate(3, modal);
		});
	}

	$$self.$$set = $$props => {
		if ("globalCloseButton" in $$props) $$invalidate(0, globalCloseButton = $$props.globalCloseButton);
		if ("closeButton" in $$props) $$invalidate(1, closeButton = $$props.closeButton);
		if ("title" in $$props) $$invalidate(2, title = $$props.title);
		if ("cancelable" in $$props) $$invalidate(6, cancelable = $$props.cancelable);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		globalCloseButton,
		closeButton,
		title,
		modal,
		close,
		handle_keydown,
		cancelable,
		$$scope,
		slots,
		div3_binding
	];
}

class Modal extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			globalCloseButton: 0,
			closeButton: 1,
			title: 2,
			cancelable: 6
		});
	}
}

export default Modal;
//# sourceMappingURL=Modal.svelte.js.map
