/* src\components\Install.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	empty,
	globals,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space
} from "../../_snowpack/pkg/svelte/internal.js";

const { window: window_1 } = globals;
import { onMount } from "../../_snowpack/pkg/svelte.js";

function create_if_block(ctx) {
	let div7;
	let div6;
	let div5;
	let div4;
	let div0;
	let t0;
	let div2;
	let p;
	let t2;
	let div1;
	let button0;
	let t4;
	let button1;
	let t6;
	let div3;
	let button2;
	let mounted;
	let dispose;

	return {
		c() {
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			div0 = element("div");
			div0.innerHTML = `<img class="h-10 w-10 rounded-full" src="/maskable_icon_512x512.png" alt="Etherplay"/>`;
			t0 = space();
			div2 = element("div");
			p = element("p");
			p.textContent = "Do you want to install Etherplay on your home screen?";
			t2 = space();
			div1 = element("div");
			button0 = element("button");
			button0.textContent = "Install";
			t4 = space();
			button1 = element("button");
			button1.textContent = "Decline";
			t6 = space();
			div3 = element("div");
			button2 = element("button");

			button2.innerHTML = `<span class="sr-only">Close</span> 
            
            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`;

			attr(div0, "class", "flex-shrink-0 pt-0.5");
			attr(p, "class", "text-sm font-medium text-gray-100");
			attr(button0, "type", "button");
			attr(button0, "class", "inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500");
			attr(button1, "type", "button");
			attr(button1, "class", "ml-3 inline-flex items-center px-3 py-2 border border-red-800 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-200 bg-red-500 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-300");
			attr(div1, "class", "mt-4 flex");
			attr(div2, "class", "ml-3 w-0 flex-1");
			attr(button2, "class", "bg-gray-900 rounded-md inline-flex text-red-400 hover:text-red-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500");
			attr(div3, "class", "ml-4 flex-shrink-0 flex");
			attr(div4, "class", "flex items-start");
			attr(div5, "class", "p-4");
			attr(div6, "class", "max-w-sm w-full bg-gray-800 shadow-lg rounded-lg pointer-events-auto ring-1 ring-gray-100 ring-opacity-5");
			attr(div7, "class", "z-50 fixed inset-0 flex items-end justify-center px-4 py-6 pointer-events-none sm:p-6 sm:items-start sm:justify-end");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div6);
			append(div6, div5);
			append(div5, div4);
			append(div4, div0);
			append(div4, t0);
			append(div4, div2);
			append(div2, p);
			append(div2, t2);
			append(div2, div1);
			append(div1, button0);
			append(div1, t4);
			append(div1, button1);
			append(div4, t6);
			append(div4, div3);
			append(div3, button2);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*install*/ ctx[3]),
					listen(button1, "click", /*decline*/ ctx[2]),
					listen(button2, "click", /*decline*/ ctx[2]),
					listen(div7, "click", click_handler)
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div7);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*deferredPrompt*/ ctx[1] && /*show*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = [
					listen(window_1, "click", /*decline*/ ctx[2]),
					listen(window_1, "scroll", /*trigger*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*deferredPrompt*/ ctx[1] && /*show*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function getVisited() {
	return localStorage.getItem("install-prompt") === "true";
}

function setVisited() {
	localStorage.setItem("install-prompt", "true");
}

const click_handler = e => {
	e.preventDefault();
	e.stopPropagation();
};

function instance($$self, $$props, $$invalidate) {
	let show = false;
	let deferredPrompt;

	function beforeinstallprompt(event) {
		event.preventDefault();
		$$invalidate(1, deferredPrompt = event);
	}

	function decline() {
		$$invalidate(0, show = false);
		setVisited();
	}

	function install() {
		$$invalidate(0, show = false);
		setVisited();
		deferredPrompt.prompt();

		deferredPrompt.userChoice.then(choice => {
			
		}); // TODO ?
	}

	function trigger() {
		if (!getVisited() && performance.now() > 2000) {
			setTimeout(() => $$invalidate(0, show = true), 1000);
		}
	}

	onMount(() => {
		window.addEventListener("beforeinstallprompt", beforeinstallprompt);
	});

	return [show, deferredPrompt, decline, install, trigger];
}

class Install extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Install;
//# sourceMappingURL=Install.svelte.js.map
