{
  "version": 3,
  "sources": ["C:\\dev\\etherplay\\new_website\\src\\stores\\notifications.ts"],
  "sourcesContent": ["import {writable} from 'svelte/store';\n\ntype Notification = {\n  id?: string;\n  delay: number;\n  onAcknowledge?: () => void;\n  title: string;\n  text: string;\n  type: 'error' | 'success' | 'info' | 'warning';\n};\n\ntype CurrentNotification = {\n  current?: Notification;\n};\n\nconst createStore = () => {\n  const recorded: Record<string, boolean> = {};\n  const pending: Notification[] = [];\n  const data: CurrentNotification = {\n    current: undefined,\n  };\n\n  let timeout: NodeJS.Timeout;\n\n  const {subscribe, set} = writable<CurrentNotification>(data);\n\n  function setCurrent(current: Notification | undefined) {\n    data.current = current;\n    set(data);\n    if (current && current.delay) {\n      if (current.onAcknowledge) {\n        current.onAcknowledge(); // TODO delay?\n      }\n      timeout = setTimeout(acknowledge, current.delay * 1000);\n    }\n  }\n\n  function acknowledge() {\n    const current = data.current;\n    if (current && !current.delay && current.onAcknowledge) {\n      current.onAcknowledge();\n    }\n    const next = pending.shift();\n    clearTimeout(timeout);\n    setCurrent(next);\n  }\n\n  function queue(notification: Notification) {\n    if (notification.id) {\n      if (recorded[notification.id]) {\n        return;\n      }\n      recorded[notification.id] = true;\n    }\n    if (pending.length > 0 || data.current) {\n      pending.push(notification);\n    } else {\n      setCurrent(notification);\n    }\n  }\n\n  return {\n    subscribe,\n    queue,\n    acknowledge,\n    clear: () => {\n      pending.splice(0, pending.length);\n      acknowledge();\n    },\n  };\n};\n\nexport const notifications = createStore();\n"],
  "mappings": "AAAA;AAeA,MAAM,cAAc;AAClB,QAAM,WAAoC;AAC1C,QAAM,UAA0B;AAChC,QAAM,OAA4B;AAAA,IAChC,SAAS;AAAA;AAGX,MAAI;AAEJ,QAAM,CAAC,WAAW,OAAO,SAA8B;AAEvD,sBAAoB;AAClB,SAAK,UAAU;AACf,QAAI;AACJ,QAAI,WAAW,QAAQ;AACrB,UAAI,QAAQ;AACV,gBAAQ;AAAA;AAEV,gBAAU,WAAW,aAAa,QAAQ,QAAQ;AAAA;AAAA;AAItD;AACE,UAAM,UAAU,KAAK;AACrB,QAAI,WAAW,CAAC,QAAQ,SAAS,QAAQ;AACvC,cAAQ;AAAA;AAEV,UAAM,OAAO,QAAQ;AACrB,iBAAa;AACb,eAAW;AAAA;AAGb,iBAAe;AACb,QAAI,aAAa;AACf,UAAI,SAAS,aAAa;AACxB;AAAA;AAEF,eAAS,aAAa,MAAM;AAAA;AAE9B,QAAI,QAAQ,SAAS,KAAK,KAAK;AAC7B,cAAQ,KAAK;AAAA;AAEb,iBAAW;AAAA;AAAA;AAIf,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AACL,cAAQ,OAAO,GAAG,QAAQ;AAC1B;AAAA;AAAA;AAAA;AAKC,aAAM,gBAAgB;",
  "names": []
}
